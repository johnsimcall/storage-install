# file: make-vms-prompt.yml
#
# prerequisites:
# NEW: sudo dnf install redhat-rpm-config python2-devel libxml2-devel libcurl-devel ; sudo easy_install ovirt-engine-sdk-python
# RPM: yum --enablerepo=rhel-7-server-rhv-4.2-manager-rpms install python-ovirt-engine-sdk4
# OLD: sudo yum --enablerepo=rhel-7-server-rhv-4.1-rpms install python-ovirt-engine-sdk4
#
# execution:
# $ ansible-playbook -i inventory make-vms-prompt.yml --ask-vault-pass
# $ ansible-playbook make-vms-prompt.yml -e @./someVarFile.yml

---
- name: Query vars files for prompt dialog
  hosts: localhost
  gather_facts: yes
  vars:
    choices:
  tasks:
    - find: 
        path: "{{ playbook_dir }}/{{ ansible_domain }}"
        pattern: "*-vars.yml"
      register: result
    - set_fact:
        choices: "{{ choices }} {{ item.path | basename }}"
      with_items: "{{ result.files }}"
      no_log: true
    - debug:
        msg: "Please choose one of these:{{ choices }}"


- hosts: localhost
#- hosts: rhvm
  gather_facts: yes
  vars_prompt:
    - prompt: "Please choose one of the above"
      name: input
      private: no
  vars_files:
    - "{{ ansible_domain }}/{{ input }}"
    - "{{ ansible_domain }}/rhvm-vault.yml"

  tasks:
    - name: Login to RHV
      ovirt_auth:
        url: "{{ rhvurl }}"
        insecure: yes
        username: "{{ rhvuser }}"
        password: "{{ rhvpass }}"

    - name: Create VMs
      ovirt_vms:
        auth: "{{ ovirt_auth }}"
        cluster: "{{ rhvCluster }}"
        template: "{{ templateName }}"
        name: "{{ item.key }}"
        state: running
#       clone: true
        instance_type: "{{ instanceType }}"
        nics:
          - name: nic1
            profile_name: ovirtmgmt
        cloud_init:
          host_name: "{{ item.key }}.{{ ansible_domain }}"
          user_name: root
          root_password: "{{ vm_root_password }}"
          authorized_ssh_keys: "{{ ssh_key }}"
          dns_servers: "{{ dnsServer }}"
          dns_search: "{{ ansible_domain }}"
          nic_name: eth0
          nic_on_boot: true
          nic_boot_protocol: "{{ item.value.nic1.ipaddress | ipaddr | ternary(item.value.nic1.ipaddress,'dhcp') }}"
          #nic_boot_protocol: "{{ item.value.nic1.ipaddress | default('dhcp') | ipaddr | ternary(item.value.nic1.ipaddress,'dhcp') }}"
          nic_ip_address: "{{ item.value.nic1.ipaddress | default(omit) }}"
          nic_netmask: "{{ item.value.nic1.netmask | default(omit) }}"
          nic_gateway: "{{ item.value.nic1.gateway | default(omit) }}"

          custom_script: |
            runcmd:
              - hostnamectl set-hostname {{ item.key }}.{{ ansible_domain }}
              - sed -i -e '/192.168.122.1/d' -e '/^[;#]/d' /etc/resolv.conf
              - yum -y remove cloud-init
        wait: true
      with_dict: "{{ vms }}" # See {{ ansible_domain }}/{{ input }} (e.g. home.lab/ocp-cns-vars.yml)

    - name: Create and attach disks
      ovirt_disk:
        auth: "{{ ovirt_auth }}"
        vm_name: "{{ item.0.name }}"
        storage_domain: "{{ storageDomain }}"
        name: "{{ item.0.name }}-disk-{{ item.1 }}"
        size: "{{ disks_size }}"
        format: cow
        interface: virtio_scsi
        wait: true
      with_subelements:
          - "{{ disks }}"
          - id

    - name: Cleanup RHV auth token
      ovirt_auth:
        ovirt_auth: "{{ ovirt_auth }}"
        state: absent


### RUBBISH ###
              #- nmcli con add type ethernet connection.id eth0 connection.interface-name eth0 ipv4.auto
              #- nmcli con add type ethernet connection.id eth0 connection.interface-name eth0 ipv4.method static ipv4.addresses {{ item.value.nic1.ipaddress }}/24 ipv4.gateway {{ item.value.nic1.gateway }} ipv4.dns {{ dnsServer }} ipv4.dns-search {{ ansible_domain }}
              #- nmcli con del "System eth0"
